#apiVersion: v1
# apiVersion: carpetas que contienen cierto tipo de recursos
# v1 => Pod, Service, Secret
# apps/v1 => Deplloyment
# which apiVersion should I use?/ buscar apiVersion para cierto recurso

#####################################################################
#####################################################################
#####################################################################
#kind: tipo de recurso queremos crear
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-depl2
spec:
  replicas: 2
  selector:
    #matchLabels hace referencia al label del pod creado con el template
    matchLabels:
      app: client2
  #template es el pod que vamos a crear(siempre seran pods aqui)
  template:
    #metadata es el nombre del label que le damos al recurso
    metadata:
      #name: nombre del pod que estamos creando
      name: client-pod2
      #labels nombre que le damos al pods para que otros recursos puedan interactuar con el
      labels:
        app: client2
    #en espec definimos los contenedores que viviran dentro de este pod
    spec:
      #containers: definimos los containers que viviran dentro del pod
      containers:
        - name: client2
          image: lexferramirez/reactrouterv6:1.5
          # #v1 llama la conexion con la DB por env
          # image: laithharb/web-app:v1
          # env:
          #   - name: MONGO_URL
          #     value: mongodb://mongo-srv/habits
#####################################################################
#####################################################################
#####################################################################
# Servicio que expone al pod creado anteriormente
---
apiVersion: v1
kind: Service
metadata:
  name: client-srv2
spec:
  type: ClusterIP #NodePort # En produccion usar LoadBalancer
  selector:
    #selector: hace referencia al label del pod creado(o cualquier otro recurso creado)
    app: client2
  ports:
    - port: 3000
      targetPort: 9002 # este es el port expuesto dentro del contenedor del pod(port donde levanta la app)


      # nodePort: 30007 (puerto que se expone)
      # rango de nodePort 30000-32767 (usado cuando el tipo de servicio es NodePort)
